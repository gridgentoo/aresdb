//  Copyright (c) 2017-2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"

// RedoLogBrowser is an autogenerated mock type for the RedoLogBrowser type
type RedoLogBrowser struct {
	mock.Mock
}

// ListLogFiles provides a mock function with given fields:
func (_m *RedoLogBrowser) ListLogFiles() ([]int64, error) {
	ret := _m.Called()

	var r0 []int64
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpsertBatch provides a mock function with given fields: creationTime
func (_m *RedoLogBrowser) ListUpsertBatch(creationTime int64) ([]int64, error) {
	ret := _m.Called(creationTime)

	var r0 []int64
	if rf, ok := ret.Get(0).(func(int64) []int64); ok {
		r0 = rf(creationTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(creationTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadData provides a mock function with given fields: creationTime, upsertBatchOffset, start, length
func (_m *RedoLogBrowser) ReadData(creationTime int64, upsertBatchOffset int64, start int, length int) ([][]interface{}, []string, int, error) {
	ret := _m.Called(creationTime, upsertBatchOffset, start, length)

	var r0 [][]interface{}
	if rf, ok := ret.Get(0).(func(int64, int64, int, int) [][]interface{}); ok {
		r0 = rf(creationTime, upsertBatchOffset, start, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]interface{})
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(int64, int64, int, int) []string); ok {
		r1 = rf(creationTime, upsertBatchOffset, start, length)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(int64, int64, int, int) int); ok {
		r2 = rf(creationTime, upsertBatchOffset, start, length)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(int64, int64, int, int) error); ok {
		r3 = rf(creationTime, upsertBatchOffset, start, length)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
