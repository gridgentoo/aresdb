// Code generated by mockery v1.0.0
package mocks

import common "github.com/uber/aresdb/metastore/common"

import mock "github.com/stretchr/testify/mock"

// TableSchemaWatchable is an autogenerated mock type for the TableSchemaWatchable type
type TableSchemaWatchable struct {
	mock.Mock
}

// WatchTableListEvents provides a mock function with given fields:
func (_m *TableSchemaWatchable) WatchTableListEvents() (<-chan []string, chan<- struct{}, error) {
	ret := _m.Called()

	var r0 <-chan []string
	if rf, ok := ret.Get(0).(func() <-chan []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []string)
		}
	}

	var r1 chan<- struct{}
	if rf, ok := ret.Get(1).(func() chan<- struct{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan<- struct{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WatchTableSchemaEvents provides a mock function with given fields:
func (_m *TableSchemaWatchable) WatchTableSchemaEvents() (<-chan *common.Table, chan<- struct{}, error) {
	ret := _m.Called()

	var r0 <-chan *common.Table
	if rf, ok := ret.Get(0).(func() <-chan *common.Table); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *common.Table)
		}
	}

	var r1 chan<- struct{}
	if rf, ok := ret.Get(1).(func() chan<- struct{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan<- struct{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
