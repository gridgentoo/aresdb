// Code generated by mockery v1.0.0
package mocks

import common "github.com/uber/aresdb/metastore/common"

import mock "github.com/stretchr/testify/mock"

// TableSchemaMutator is an autogenerated mock type for the TableSchemaMutator type
type TableSchemaMutator struct {
	mock.Mock
}

// AddColumn provides a mock function with given fields: table, column, appendToArchivingSortOrder
func (_m *TableSchemaMutator) AddColumn(table string, column common.Column, appendToArchivingSortOrder bool) error {
	ret := _m.Called(table, column, appendToArchivingSortOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.Column, bool) error); ok {
		r0 = rf(table, column, appendToArchivingSortOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTable provides a mock function with given fields: table
func (_m *TableSchemaMutator) CreateTable(table *common.Table) error {
	ret := _m.Called(table)

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Table) error); ok {
		r0 = rf(table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteColumn provides a mock function with given fields: table, column
func (_m *TableSchemaMutator) DeleteColumn(table string, column string) error {
	ret := _m.Called(table, column)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(table, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTable provides a mock function with given fields: name
func (_m *TableSchemaMutator) DeleteTable(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTable provides a mock function with given fields: name
func (_m *TableSchemaMutator) GetTable(name string) (*common.Table, error) {
	ret := _m.Called(name)

	var r0 *common.Table
	if rf, ok := ret.Get(0).(func(string) *common.Table); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTables provides a mock function with given fields:
func (_m *TableSchemaMutator) ListTables() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateColumn provides a mock function with given fields: table, column, config
func (_m *TableSchemaMutator) UpdateColumn(table string, column string, config common.ColumnConfig) error {
	ret := _m.Called(table, column, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, common.ColumnConfig) error); ok {
		r0 = rf(table, column, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTable provides a mock function with given fields: table
func (_m *TableSchemaMutator) UpdateTable(table common.Table) error {
	ret := _m.Called(table)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Table) error); ok {
		r0 = rf(table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTableConfig provides a mock function with given fields: table, config
func (_m *TableSchemaMutator) UpdateTableConfig(table string, config common.TableConfig) error {
	ret := _m.Called(table, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.TableConfig) error); ok {
		r0 = rf(table, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
